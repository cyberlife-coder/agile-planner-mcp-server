#!/usr/bin/env node
/**
 * Script d√©di√© √† la g√©n√©ration d'une structure conforme √† la RULE 3
 * Ce script garantit que les user stories sont bien plac√©es dans leurs features respectives
 * et que tous les r√©pertoires et fichiers attendus sont cr√©√©s.
 * 
 * Usage: node generate-rule3-structure.js [--output-path=<path>]
 */

const fs = require('fs-extra');
const path = require('path');
const chalk = require('chalk');

// Importer les modules de g√©n√©ration
const markdownGenerator = require('../server/lib/markdown-generator');

// Importer les modules utilitaires
const { 
  verifyBaseStructure,
  verifyEpics,
  verifyIterations,
  displayResults
} = require('./verification-utils');

// Importer les donn√©es d'exemple
const {
  DEFAULT_PROJECT_NAME,
  DEFAULT_PROJECT_DESCRIPTION,
  createExampleBacklog,
  createExampleFeature
} = require('./generate-example-data');

// Configuration
const DEFAULT_OUTPUT_DIR = process.env.AGILE_PLANNER_OUTPUT_ROOT || path.resolve(__dirname, '../output');

/**
 * R√©cup√®re les arguments de la ligne de commande
 * @returns {Object} Les arguments extraits
 */
function parseArgs() {
  const args = process.argv.slice(2);
  const options = {
    outputPath: DEFAULT_OUTPUT_DIR
  };

  // Extraire les param√®tres
  args.forEach(arg => {
    if (arg.startsWith('--output-path=')) {
      options.outputPath = arg.substring('--output-path='.length);
    }
  });

  return options;
}

/**
 * Cr√©e la structure de base conforme √† la RULE 3
 * @param {string} outputDir - R√©pertoire de sortie
 */
async function createBaseStructure(outputDir) {
  console.log(chalk.blue(`üìÇ Cr√©ation de la structure de base RULE 3 dans: ${outputDir}`));
  
  // Cr√©er le r√©pertoire racine du backlog
  const backlogDir = path.join(outputDir, '.agile-planner-backlog');
  
  // Cr√©er les r√©pertoires principaux selon RULE 3
  await fs.ensureDir(backlogDir);
  await fs.ensureDir(path.join(backlogDir, 'epics'));
  await fs.ensureDir(path.join(backlogDir, 'planning'));
  await fs.ensureDir(path.join(backlogDir, 'planning', 'mvp'));
  await fs.ensureDir(path.join(backlogDir, 'planning', 'iterations'));
  
  // Cr√©er un fichier README expliquant la structure
  const readmeContent = `# Structure Backlog Agile Planner (RULE 3)

Cette structure est conforme √† la RULE 3 du projet Agile Planner et contient:

\`\`\`
.agile-planner-backlog/
‚îú‚îÄ‚îÄ epics/                   # Dossier contenant tous les epics
‚îÇ   ‚îî‚îÄ‚îÄ [epic-slug]/         # Un dossier par epic
‚îÇ       ‚îú‚îÄ‚îÄ epic.md          # Fichier markdown d√©crivant l'epic
‚îÇ       ‚îî‚îÄ‚îÄ features/        # Dossier contenant les features de cet epic
‚îÇ           ‚îî‚îÄ‚îÄ [feature-slug]/  # Un dossier par feature
‚îÇ               ‚îú‚îÄ‚îÄ feature.md   # Fichier markdown d√©crivant la feature
‚îÇ               ‚îî‚îÄ‚îÄ user-stories/ # Dossier contenant les user stories de cette feature
‚îÇ                   ‚îî‚îÄ‚îÄ [story-slug].md # Un fichier markdown par user story
‚îú‚îÄ‚îÄ planning/               # Dossier contenant la planification
‚îÇ   ‚îú‚îÄ‚îÄ mvp/                # Dossier contenant les √©l√©ments du MVP
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ mvp.md          # Fichier markdown d√©crivant le MVP
‚îÇ   ‚îî‚îÄ‚îÄ iterations/         # Dossier contenant les it√©rations
‚îÇ       ‚îî‚îÄ‚îÄ [iteration-name]/ # Un dossier par it√©ration
‚îÇ           ‚îî‚îÄ‚îÄ iteration.md  # Fichier markdown d√©crivant l'it√©ration
‚îî‚îÄ‚îÄ README.md               # Ce fichier explicatif
\`\`\`

G√©n√©r√© le: ${new Date().toISOString()}
`;

  await fs.writeFile(path.join(backlogDir, 'README.md'), readmeContent);
  console.log(chalk.green('‚úÖ Structure de base cr√©√©e avec succ√®s'));
  
  return backlogDir;
}

/**
 * G√©n√®re un exemple de backlog statique et le mat√©rialise en fichiers markdown
 * @param {string} outputDir - R√©pertoire de sortie
 * @returns {Promise<Object>} R√©sultat de la g√©n√©ration
 */
async function generateExampleBacklog(outputDir) {
  console.log(chalk.blue(`ü§ú G√©n√©ration d'un backlog d'exemple statique...`));
  
  // Obtenir le backlog d'exemple √† partir du module s√©par√©
  const exampleBacklog = createExampleBacklog();
  
  try {
    // Mat√©rialiser le backlog en fichiers markdown
    const markdownResult = await markdownGenerator.generateMarkdownFromBacklog(
      exampleBacklog,
      outputDir
    );
    
    if (!markdownResult || !markdownResult.success) {
      const errorMessage = markdownResult?.error?.message ?? 'Erreur inconnue';
      console.error(chalk.red(`‚ùå √âchec de la g√©n√©ration des fichiers markdown: ${errorMessage}`));
      throw new Error('√âchec de la g√©n√©ration des fichiers markdown');
    }
    
    console.log(chalk.green(`‚úÖ Fichiers markdown g√©n√©r√©s avec succ√®s`));
    return {
      success: true,
      backlogData: exampleBacklog
    };
  } catch (error) {
    console.error(chalk.red(`‚ùå Erreur lors de la g√©n√©ration des fichiers markdown: ${error.message}`));
    throw error;
  }
}

/**
 * G√©n√®re un exemple de feature statique et le mat√©rialise en fichiers markdown
 * @param {string} outputDir - R√©pertoire de sortie
 * @returns {Promise<Object>} R√©sultat de la g√©n√©ration
 */
async function generateExampleFeature(outputDir) {
  console.log(chalk.blue(`ü§ú G√©n√©ration d'une feature d'exemple statique...`));
  
  // Obtenir le feature d'exemple √† partir du module s√©par√©
  const featureData = createExampleFeature();
  
  try {
    // Mat√©rialiser la feature en fichiers markdown
    const markdownResult = await markdownGenerator.generateMarkdownFromBacklog(
      featureData,
      outputDir
    );
    
    if (!markdownResult || !markdownResult.success) {
      const errorMessage = markdownResult?.error?.message ?? 'Erreur inconnue';
      console.error(chalk.red(`‚ùå √âchec de la g√©n√©ration des fichiers markdown pour la feature: ${errorMessage}`));
      throw new Error('√âchec de la g√©n√©ration des fichiers markdown pour la feature');
    }
    
    console.log(chalk.green(`‚úÖ Fichiers markdown g√©n√©r√©s avec succ√®s pour la feature`));
    return { success: true };
    
  } catch (error) {
    console.error(chalk.red(`‚ùå Erreur lors de la g√©n√©ration des fichiers markdown pour la feature: ${error.message}`));
    throw error;
  }
}

/**
 * V√©rifie que la structure g√©n√©r√©e est conforme √† la RULE 3
 * @param {string} backlogDir - R√©pertoire du backlog
 * @param {Object} backlogData - Donn√©es du backlog g√©n√©r√©
 * @returns {Object} R√©sultat de la v√©rification
 */
function verifyRule3Compliance(backlogDir, backlogData) {
  console.log(chalk.blue(`üîç V√©rification de la conformit√© √† la RULE 3...`));
  
  const results = {
    valid: true,
    errors: [],
    warnings: [],
    stats: {
      epicCount: 0,
      featureCount: 0,
      storyCount: 0,
      files: 0
    }
  };
  
  // 1. V√©rifier la structure de base
  const { epicsDir, mvpDir, iterationsDir } = verifyBaseStructure(backlogDir, results);
  
  // 2. V√©rifier les epics
  verifyEpics(epicsDir, results);
  
  // 3. V√©rifier le MVP
  verifyMvp(mvpDir, results);
  
  // 4. V√©rifier les it√©rations
  verifyIterations(iterationsDir, results);
  
  // 5. Afficher les r√©sultats
  displayResults(results);
  
  return results;
}

/**
 * V√©rifie les donn√©es du MVP
 * @param {string} mvpDir - Chemin du r√©pertoire MVP
 * @param {Object} results - Objet r√©sultats √† remplir
 */
function verifyMvp(mvpDir, results) {
  try {
    const mvpFile = path.join(mvpDir, 'mvp.md');
    if (fs.existsSync(mvpFile)) {
      results.stats.files++;
    }
  } catch (err) {
    results.warnings.push(`Erreur lors de la v√©rification du MVP: ${err.message}`);
  }
}

/**
 * Fonction principale ex√©cutant le script
 */
async function main() {
  console.log(chalk.green('üöÄ D√©marrage de la g√©n√©ration RULE 3'));
  
  // R√©cup√©rer les options
  const options = parseArgs();
  console.log(chalk.blue(`üìÇ R√©pertoire de sortie: ${options.outputPath}`));
  
  try {
    // Cr√©er la structure de base
    const backlogDir = await createBaseStructure(options.outputPath);
    
    // G√©n√©rer et mat√©rialiser un backlog exemple statique
    const backlogGeneration = await generateExampleBacklog(options.outputPath);
    
    // G√©n√©rer et mat√©rialiser une feature exemple statique
    await generateExampleFeature(options.outputPath);
    
    // V√©rifier la conformit√© √† la RULE 3
    const verificationResults = verifyRule3Compliance(
      backlogDir,
      backlogGeneration.backlogData
    );
    
    if (verificationResults.valid) {
      console.log(chalk.green('üéâ G√©n√©ration RULE 3 termin√©e avec succ√®s'));
      process.exit(0);
    } else {
      console.error(chalk.red('‚ö†Ô∏è La structure g√©n√©r√©e n\'est pas enti√®rement conforme √† la RULE 3'));
      process.exit(1);
    }
  } catch (error) {
    console.error(chalk.red(`‚ùå Erreur lors de la g√©n√©ration: ${error.message}`));
    console.error(error.stack);
    process.exit(1);
  }
}

// Ex√©cuter le script
main();
