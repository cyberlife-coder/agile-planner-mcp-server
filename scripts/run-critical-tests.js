/**
 * Script d'ex√©cution des tests critiques pour l'Agile Planner MCP Server
 * Conforme √† la RULE 1 (TDD) et √† la strat√©gie Wave 8
 * 
 * @version 1.7.1
 * @description 
 * Ex√©cute les tests critiques avec une tol√©rance aux erreurs configurable
 * 
 * Usage:
 * - Mode normal: node scripts/run-critical-tests.js
 * - Mode rapide: node scripts/run-critical-tests.js --quick
 * - Mode strict: node scripts/run-critical-tests.js --strict
 */

const { execSync, exec } = require('child_process');
const path = require('path');
const fs = require('fs');

// Configuration
const TEST_TIMEOUT = 60000; // 60 secondes par test
const JEST_BASE_CMD = 'npx jest';

// Traitement des arguments
const args = process.argv.slice(2);
const QUICK_MODE = args.includes('--quick');
const STRICT_MODE = args.includes('--strict');

// Liste des tests critiques √† ex√©cuter
const CRITICAL_TESTS = [
  // Tests unitaires disponibles
  'tests/backlog-generator.test.js',
  'tests/json-parser.test.js',
  
  // Tests du CLI et MCP (prioritaires)
  'tests/integration/cli.e2e.test.js',
  'tests/integration/cli-integration.test.js',
  
  // Tests de validation de la structure RULE 3
  'tests/integration/mcp-integration.test.js'
];

// Tests alternatifs √† ex√©cuter en cas d'√©chec des tests principaux
const BACKUP_TESTS = [
  'test-mcp-rule3.js'
];

// Fonction pour ex√©cuter un test avec gestion appropri√©e des erreurs
function runTest(testPath) {
  const testName = path.basename(testPath);
  console.log(`\n\n=========================================`);
  console.log(`üß™ Ex√©cution du test: ${testName}`);
  console.log(`=========================================\n`);
  
  try {
    let command = '';
    
    // D√©terminer la commande d'ex√©cution selon le type de test
    if (testPath.includes('.test.js')) {
      // Test Jest standard
      command = `${JEST_BASE_CMD} --forceExit --testTimeout=${TEST_TIMEOUT} "${testPath}"`;
    } else {
      // Script Node.js direct (comme test-mcp-rule3.js)
      command = `node "${testPath}"`;
    }
    
    // Ex√©cuter le test
    console.log(`> ${command}\n`);
    const output = execSync(command, { 
      encoding: 'utf8',
      env: { ...process.env, NODE_ENV: 'test' },
      stdio: 'inherit'
    });
    
    return { success: true, output };
  } catch (error) {
    console.error(`\n‚ùå Test ${testName} a √©chou√©`);
    if (error.stderr) console.error(error.stderr);
    return { success: false, error };
  }
}

// Fonctions auxiliaires pour r√©duire la complexit√© cognitive
function printHeader() {
  console.log('\n=========================================');
  console.log('üîç EX√âCUTION DES TESTS CRITIQUES WAVE 8');
  console.log('=========================================\n');
  
  console.log('Mode: Tests minimaux et critiques');
  console.log(`Tests √† ex√©cuter: ${CRITICAL_TESTS.length}\n`);
}

// Ex√©cute les tests d'une liste donn√©e et retourne les r√©sultats
function executeTestList(testList, isBackup = false) {
  const results = [];
  const failedTests = [];
  
  for (const testPath of testList) {
    // V√©rifier si le test existe
    if (!fs.existsSync(testPath)) {
      console.warn(`‚ö†Ô∏è Test ${isBackup ? 'alternatif ' : ''}non trouv√©: ${testPath}`);
      if (!isBackup) { // Ne pas ajouter les tests alternatifs manquants aux r√©sultats
        results.push({ 
          path: testPath, 
          success: false, 
          error: { message: 'Fichier non trouv√©' },
          isBackup
        });
        failedTests.push(testPath);
      }
      continue;
    }
    
    // Ex√©cuter le test
    const result = runTest(testPath);
    results.push({ path: testPath, isBackup, ...result });
    
    if (!result.success) {
      failedTests.push(testPath);
    }
  }
  
  return { results, failedTests };
}

// G√©n√®re le rapport de r√©sultats
function printSummary(allResults) {
  console.log('\n\n=========================================');
  console.log('üìä R√âSUM√â DES TESTS CRITIQUES');
  console.log('=========================================\n');
  
  const successCount = allResults.filter(r => r.success).length;
  const failureCount = allResults.filter(r => !r.success).length;
  
  console.log(`Total des tests ex√©cut√©s: ${allResults.length}`);
  console.log(`‚úÖ Succ√®s: ${successCount}`);
  console.log(`‚ùå √âchecs: ${failureCount}\n`);
  
  if (failureCount > 0) {
    console.log('Tests en √©chec:');
    allResults.filter(r => !r.success).forEach(result => {
      console.log(`  - ${result.path}${result.isBackup ? ' (alternatif)' : ''}`);
    });
  }
  
  return failureCount;
}

// D√©termine le code de sortie en fonction du mode et des r√©sultats
function handleExitCode(failureCount) {
  if (STRICT_MODE) {
    // En mode strict, tout √©chec cause une erreur
    process.exit(failureCount > 0 ? 1 : 0);
  } else if (QUICK_MODE) {
    // En mode rapide, on tol√®re des √©checs pour acc√©l√©rer le d√©veloppement
    console.log('\n‚ÑπÔ∏è Mode rapide: exit code 0 m√™me en cas d\'erreur');
    process.exit(0);
  } else {
    // En mode normal, on sort avec un code appropri√©
    process.exit(failureCount > 0 ? 1 : 0);
  }
}

// Fonction principale pour ex√©cuter tous les tests critiques
// Complexit√© cognitive r√©duite (<15) en extrayant des fonctions auxiliaires
async function runCriticalTests() {
  // 1. Afficher l'en-t√™te
  printHeader();
  
  // 2. Ex√©cuter les tests critiques
  const { results, failedTests } = executeTestList(CRITICAL_TESTS);
  
  // 3. G√©rer les tests alternatifs si n√©cessaire
  if (failedTests.length > 0 && BACKUP_TESTS.length > 0 && !QUICK_MODE) {
    // Afficher message pour les tests alternatifs
    console.log('\n\n=========================================');
    console.log(`‚ùó ${failedTests.length} tests ont √©chou√©. Ex√©cution des tests alternatifs...`);
    console.log('=========================================\n');
    
    // Ex√©cuter les tests alternatifs et ajouter leurs r√©sultats
    const backupResults = executeTestList(BACKUP_TESTS, true);
    results.push(...backupResults.results);
  } else if (QUICK_MODE && failedTests.length > 0) {
    console.log('\n\n=========================================');
    console.log(`‚ÑπÔ∏è Mode rapide activ√© - Tests alternatifs ignor√©s`);
    console.log('=========================================\n');
  }
  
  // 4. Afficher le r√©sum√© et g√©rer la sortie
  const failureCount = printSummary(results);
  handleExitCode(failureCount);
}

// Ex√©cuter les tests
runCriticalTests().catch(error => {
  console.error('Erreur non g√©r√©e:', error);
  process.exit(1);
});
