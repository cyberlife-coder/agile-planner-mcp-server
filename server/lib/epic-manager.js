/**
 * @fileoverview Module de gestion des epics et de leur association avec les features
 * Permet de trouver intelligemment si une feature doit √™tre associ√©e √† une epic existante
 * ou si une nouvelle epic doit √™tre cr√©√©e
 * 
 * @module epic-manager
 * @requires fs-extra
 * @requires path
 * @requires chalk
 * @requires api-client
 */

const fs = require('fs-extra');
const path = require('path');
const chalk = require('chalk');
const apiClient = require('./api-client');
const { sanitizeFileName } = require('./utils/file-utils');

/**
 * Recherche les epics existantes et analyse leur contenu pour d√©terminer 
 * la plus pertinente pour une feature
 * 
 * @async
 * @param {string} outputPath - Chemin de sortie o√π se trouve la structure
 * @param {string} featureDescription - Description de la feature √† associer
 * @returns {Promise<Object|null>} L'epic la plus pertinente ou null si aucune n'est suffisamment coh√©rente
 */
async function findRelevantExistingEpic(outputPath, featureDescription) {
  console.error(chalk.blue(`üîç Recherche d'epics existantes pour la feature dans: ${outputPath}`));
  
  const backlogDir = path.join(outputPath, '.agile-planner-backlog');
  const epicsDir = path.join(backlogDir, 'epics');
  
  // V√©rifier si le r√©pertoire epics existe
  if (!fs.existsSync(epicsDir)) {
    console.error(chalk.yellow(`‚ö†Ô∏è Aucun r√©pertoire epics trouv√© dans ${backlogDir}`));
    return null; // Pas d'epics existantes
  }
  
  // Lire toutes les epics
  try {
    const epicDirs = fs.readdirSync(epicsDir).filter(dir => 
      fs.statSync(path.join(epicsDir, dir)).isDirectory()
    );
    
    if (epicDirs.length === 0) {
      console.error(chalk.yellow('‚ö†Ô∏è Aucune epic trouv√©e dans le r√©pertoire'));
      return null; // Pas d'epics existantes
    }
    
    console.error(chalk.green(`‚úÖ ${epicDirs.length} epics trouv√©es, analyse en cours...`));
    
    // Analyser chaque epic
    const epics = [];
    for (const epicDir of epicDirs) {
      const epicPath = path.join(epicsDir, epicDir);
      const epicFile = path.join(epicPath, 'epic.md');
      
      if (fs.existsSync(epicFile)) {
        const content = fs.readFileSync(epicFile, 'utf8');
        
        // Extraire le titre et la description
        const titleMatch = content.match(/# Epic: (.*)/);
        const descriptionMatch = content.match(/## Description\s+([\s\S]*?)(?=##|$)/);
        
        if (titleMatch && descriptionMatch) {
          epics.push({
            id: epicDir,
            title: titleMatch[1].trim(),
            description: descriptionMatch[1].trim(),
            dirPath: epicPath
          });
        }
      }
    }
    
    if (epics.length === 0) {
      console.error(chalk.yellow('‚ö†Ô∏è Aucune epic avec contenu analysable trouv√©e'));
      return null; // Pas d'epics analysables
    }
    
    // Demander √† l'IA d'√©valuer la coh√©rence
    return await evaluateFeatureEpicCoherence(epics, featureDescription);
    
  } catch (error) {
    console.error(chalk.red(`‚ùå Erreur lors de la recherche d'epics: ${error.message}`));
    return null;
  }
}

/**
 * Utilise l'IA pour √©valuer la coh√©rence entre une feature et les epics existantes
 * 
 * @async
 * @param {Array} epics - Liste des epics existantes
 * @param {string} featureDescription - Description de la feature
 * @returns {Promise<Object|null>} L'epic la plus pertinente ou param√®tres pour une nouvelle epic
 */
async function evaluateFeatureEpicCoherence(epics, featureDescription) {
  console.error(chalk.blue(`üß† √âvaluation de la coh√©rence entre la feature et ${epics.length} epics existantes`));
  
  // Pr√©parer la requ√™te pour l'IA
  const prompt = `
  Je dois d√©terminer si une nouvelle feature doit √™tre associ√©e √† une epic existante ou n√©cessite une nouvelle epic.
  
  Voici la description de la feature:
  ${featureDescription}
  
  Voici les epics existantes:
  ${epics.map((epic, index) => `Epic ${index + 1}:\nID: ${epic.id}\nTitre: ${epic.title}\nDescription: ${epic.description}`).join('\n\n')}
  
  √âvalue la coh√©rence th√©matique entre cette feature et chaque epic.
  Si la feature est clairement li√©e √† une epic existante, retourne l'ID de cette epic.
  Si la feature n√©cessite une nouvelle epic, sugg√®re un titre et une description pour cette nouvelle epic.
  
  R√©ponds au format JSON, et uniquement au format JSON:
  {
    "useExistingEpic": true/false,
    "existingEpicId": "id-de-l-epic-existante" (si useExistingEpic est true),
    "newEpicTitle": "Titre de la nouvelle epic" (si useExistingEpic est false),
    "newEpicDescription": "Description de la nouvelle epic" (si useExistingEpic est false),
    "confidence": 0.0-1.0 (niveau de confiance de la d√©cision)
  }
  `;
  
  try {
    // Obtenir la r√©ponse de l'IA
    const client = apiClient.getClient();
    const response = await client.complete({
      prompt: prompt,
      max_tokens: 500,
      temperature: 0.2, // Temp√©rature basse pour des r√©ponses plus coh√©rentes
      response_format: { type: "json_object" } // Forcer le format JSON
    });
    
    let result;
    try {
      // Analyser la r√©ponse JSON
      const responseText = response.text || response.completion || response;
      result = typeof responseText === 'string' ? JSON.parse(responseText) : responseText;
    } catch (parseError) {
      console.error(chalk.red(`‚ùå Erreur de parsing JSON: ${parseError.message}`));
      console.error(chalk.yellow(`R√©ponse brute: ${response.text || response.completion || JSON.stringify(response)}`));
      
      // Fallback: cr√©er une nouvelle epic avec des valeurs par d√©faut
      return {
        isNew: true,
        title: `Nouvelle Epic pour ${featureDescription.substring(0, 30)}...`,
        description: `Epic cr√©√©e automatiquement pour la feature: ${featureDescription.substring(0, 100)}...`
      };
    }
    
    // Si l'IA sugg√®re d'utiliser une epic existante avec suffisamment de confiance
    if (result.useExistingEpic && result.confidence > 0.65) {
      // Trouver l'epic correspondante
      const matchingEpic = epics.find(epic => epic.id === result.existingEpicId);
      if (matchingEpic) {
        console.error(chalk.green(`‚úÖ Feature associ√©e √† l'epic existante "${matchingEpic.title}" avec une confiance de ${result.confidence.toFixed(2)}`));
        return {
          ...matchingEpic,
          isNew: false
        };
      }
    }
    
    // Sinon, sugg√©rer une nouvelle epic
    console.error(chalk.blue(`üìå Cr√©ation d'une nouvelle epic recommand√©e: "${result.newEpicTitle || 'Nouvelle Epic'}"`));
    return {
      isNew: true,
      title: result.newEpicTitle || `Epic pour ${featureDescription.substring(0, 30)}...`,
      description: result.newEpicDescription || `Epic cr√©√©e pour la feature: ${featureDescription}`
    };
    
  } catch (error) {
    console.error(chalk.red(`‚ùå Erreur lors de l'√©valuation de la coh√©rence: ${error.message}`));
    // En cas d'erreur, cr√©er une nouvelle epic par d√©faut
    return {
      isNew: true,
      title: `Nouvelle Epic (${new Date().toISOString().split('T')[0]})`,
      description: `Epic cr√©√©e automatiquement pour la feature: ${featureDescription.substring(0, 100)}...`
    };
  }
}

/**
 * Cr√©e une nouvelle epic si n√©cessaire
 * 
 * @async
 * @param {Object} epicInfo - Informations sur l'epic √† cr√©er
 * @param {string} outputPath - Chemin de sortie
 * @returns {Promise<Object>} Informations sur l'epic cr√©√©e ou existante
 */
async function createNewEpicIfNeeded(epicInfo, outputPath) {
  // Si l'epic existe d√©j√†, la retourner simplement
  if (!epicInfo.isNew) {
    return {
      id: epicInfo.id,
      title: epicInfo.title,
      description: epicInfo.description
    };
  }
  
  console.error(chalk.blue(`üìù Cr√©ation d'une nouvelle epic: "${epicInfo.title}"`));
  
  // G√©n√©rer un ID pour la nouvelle epic
  const epicId = sanitizeFileName(epicInfo.title.toLowerCase().replace(/[^\w\s-]/g, '').replace(/\s+/g, '-'));
  const backlogDir = path.join(outputPath, '.agile-planner-backlog');
  const epicDir = path.join(backlogDir, 'epics', epicId);
  const epicFile = path.join(epicDir, 'epic.md');
  
  try {
    // Cr√©er les r√©pertoires n√©cessaires
    await fs.ensureDir(epicDir);
    await fs.ensureDir(path.join(epicDir, 'features'));
    
    // G√©n√©rer le contenu markdown de l'epic
    const epicMarkdown = `# Epic: ${epicInfo.title}

## Description
${epicInfo.description}

## Objectifs
- Impl√©menter les fonctionnalit√©s li√©es √† cette epic

## Crit√®res d'acceptation
- [ ] Toutes les features sont impl√©ment√©es
- [ ] Tous les tests sont passants

## Features associ√©es
<!-- Ne pas modifier manuellement cette section, elle sera mise √† jour automatiquement -->

## M√©tadonn√©es
- **ID**: \`${epicId}\`
- **Priorit√©**: Moyenne
- **Statut**: √Ä faire
- **Date de cr√©ation**: ${new Date().toISOString().split('T')[0]}
- **Derni√®re mise √† jour**: ${new Date().toISOString().split('T')[0]}
`;
    
    // √âcrire le fichier markdown
    await fs.writeFile(epicFile, epicMarkdown);
    
    console.error(chalk.green(`‚úÖ Epic cr√©√©e avec succ√®s: ${epicFile}`));
    
    return {
      id: epicId,
      title: epicInfo.title,
      description: epicInfo.description
    };
  } catch (error) {
    console.error(chalk.red(`‚ùå Erreur lors de la cr√©ation de l'epic: ${error.message}`));
    throw error;
  }
}

module.exports = {
  findRelevantExistingEpic,
  evaluateFeatureEpicCoherence,
  createNewEpicIfNeeded
};
