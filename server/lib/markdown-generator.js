/**
 * Module de compatibilit√© pour la g√©n√©ration de fichiers markdown
 * Redirige vers la nouvelle architecture modulaire
 * @module markdown-generator
 */

const path = require('path');
const fs = require('fs-extra');
const chalk = require('chalk');

console.log(chalk.yellow('üîç Chargement du module markdown-generator.js de compatibilit√©'));

// Importer le nouveau module fa√ßade
const { 
  createMarkdownGenerator
} = require('./markdown/index'); // Uniquement createMarkdownGenerator est export√© directement

console.log(chalk.green('‚úÖ Module fa√ßade (createMarkdownGenerator) import√© avec succ√®s'));

/**
 * G√©n√®re les fichiers markdown pour une feature
 * @param {Object} feature - La feature √† formater
 * @param {string} outputDir - R√©pertoire de sortie
 * @returns {Promise<Object>} - R√©sultat de la g√©n√©ration
 */
const generateFeatureMarkdown = async (feature, outputDir) => {
  console.log(chalk.blue('üî† Generating feature markdown using refactored architecture...'));
  
  const featureData = feature.feature || feature;
  const title = featureData.title || 'Feature sans titre';
  const description = featureData.description || '';
  
  console.log(chalk.yellow(`Feature re√ßue: "${title}"`));
  console.log(chalk.yellow(`R√©pertoire de sortie: ${outputDir}`));
  
  const result = {
    projectName: title, // Utiliser projectName pour la coh√©rence
    projectDescription: description,
    epics: [{
      title: 'Feature Epic', // Un epic conteneur pour la feature
      description: description,
      features: [featureData]
    }]
  };
  
  console.log(chalk.yellow(`Structure adapt√©e cr√©√©e pour la feature "${title}"`));
  
  try {
    const markdownGeneratorInstance = createMarkdownGenerator();
    const genResult = await markdownGeneratorInstance.generateMarkdownFilesFromResult(result, outputDir);
    console.log(chalk.green(`‚úÖ Markdown g√©n√©r√© avec succ√®s dans ${outputDir}`));
    return genResult;
  } catch (error) {
    console.error(chalk.red(`‚ùå Erreur lors de la g√©n√©ration du markdown: ${error.message}`));
    console.error(chalk.red(error.stack));
    throw error;
  }
};

/**
 * D√©termine la structure de donn√©es √† utiliser pour le traitement
 * @param {Object} backlog - Backlog √† analyser
 * @returns {Object} - Structure de donn√©es √† traiter
 */
function determineBacklogStructure(backlog) {
  if (!backlog) {
    console.error(chalk.red(`‚ùå Structure de backlog invalide`));
    throw new Error('Structure de backlog invalide ou manquante');
  }
  
  if (backlog.success === false && backlog.error) {
    console.error(chalk.red(`‚ùå Erreur explicite dans le backlog: ${backlog.error}`));
    throw new Error(`Erreur explicite dans le backlog: ${backlog.error}`);
  }

  if (backlog.success && backlog.result) {
    console.log(chalk.yellow(`Utilisation de backlog.result pour le traitement`));
    return backlog.result;
  }
  
  if (backlog.project) {
    console.log(chalk.yellow(`Utilisation directe du backlog pour le traitement (legacy)`));
    return backlog;
  }
  
  if (backlog.result?.project) { // Note: 'project' au singulier est legacy
    console.log(chalk.yellow(`Utilisation de backlog.result qui contient project (legacy)`));
    return backlog.result;
  }
  
  // Nouveau format attendu: projectName, projectDescription, epics, orphan_stories directement
  if (backlog.projectName && Array.isArray(backlog.epics)) {
    console.log(chalk.yellow(`Utilisation directe du backlog (format moderne attendu)`));
    return backlog;
  }

  console.warn(chalk.yellow(`[MD-GEN COMPAT] Conversion d'une structure inconnue en un format compatible... Cela peut indiquer un probl√®me en amont.`));
  return {
    projectName: backlog.name || backlog.title || 'Projet sans titre (converti)',
    projectDescription: backlog.description || 'Description manquante (convertie)',
    epics: backlog.epics || [],
    orphan_stories: backlog.orphan_stories || [] // Ajouter orphan_stories pour la compl√©tude
    // iterations et mvp ne sont plus g√©r√©s par le nouveau g√©n√©rateur
  };
}

/**
 * Alias de generateMarkdownFilesFromResult pour la compatibilit√©
 * @param {Object} backlog - Le backlog √† formater
 * @param {string} outputDir - R√©pertoire de sortie
 * @returns {Promise<Object>} - R√©sultat de la g√©n√©ration
 */
const generateMarkdownFiles = async (backlog, outputDir) => {
  console.log(chalk.blue('üî† Generating markdown files using refactored architecture (via markdown-generator.js)...'));
  
  console.log(chalk.yellow(`Structure du backlog re√ßu avant determineBacklogStructure : ${typeof backlog === 'object' ? 'Objet' : typeof backlog}`));
  if (typeof backlog === 'object' && backlog !== null) {
    console.log(chalk.yellow(`  Keys: ${Object.keys(backlog).join(', ')}`));
    if (backlog.result) {
        console.log(chalk.yellow(`  Keys in backlog.result: ${Object.keys(backlog.result).join(', ')}`));
    }
  }

  const finalOutputDir = outputDir || path.join(process.cwd(), '.agile-planner-backlog');
  console.log(chalk.yellow(`R√©pertoire de sortie: ${finalOutputDir}`));

  try {
    const backlogData = determineBacklogStructure(backlog);
    console.log(chalk.yellow(`Structure du backlog apr√®s determineBacklogStructure : projectName="${backlogData.projectName}"`));

    const markdownGeneratorInstance = createMarkdownGenerator();
    const genResult = await markdownGeneratorInstance.generateMarkdownFilesFromResult(backlogData, finalOutputDir);
    
    console.log(chalk.green(`‚úÖ Markdown g√©n√©r√© avec succ√®s dans ${finalOutputDir} (via markdown-generator.js)`));
    return genResult;
  } catch (error) {
    console.error(chalk.red(`‚ùå Erreur lors de la g√©n√©ration du markdown (depuis markdown-generator.js): ${error.message}`));
    console.error(chalk.red(error.stack));
    throw error;
  }
};

// Constantes pour la compatibilit√©
const epicFileInstructions = `Ce document est g√©n√©r√© par Agile Planner et contient des informations sur un Epic.
Les User Stories associ√©es se trouvent dans les sous-dossiers.
Vous pouvez explorer le backlog complet en naviguant dans les liens.`;

const featureFileInstructions = `Ce document est g√©n√©r√© par Agile Planner et contient des informations sur une Feature.
Les User Stories associ√©es se trouvent dans les sous-dossiers.
Vous pouvez explorer le backlog complet en naviguant dans les liens.`;

const userStoryFileInstructions = `Ce document est g√©n√©r√© par Agile Planner et contient des informations sur une User Story.
Consultez les sections Acceptance Criteria et Technical Tasks pour comprendre les exigences.`;

const iterationFileInstructions = `Ce document est g√©n√©r√© par Agile Planner et contient des informations sur une It√©ration.
Il liste les User Stories √† compl√©ter dans cette it√©ration.
Vous pouvez acc√©der aux User Stories en cliquant sur les liens.`;

const mvpFileInstructions = `Ce document est g√©n√©r√© par Agile Planner et d√©finit le Minimum Viable Product (MVP).
Il regroupe les User Stories essentielles pour une premi√®re version fonctionnelle.
Vous pouvez acc√©der aux User Stories en cliquant sur les liens.`;

/**
 * Fonction qui valide un backlog et extrait ses donn√©es pour √™tre utilis√©e par le syst√®me de g√©n√©ration de markdown
 * V√©rifie si le backlog est au format moderne avec 'epics' (pluriel)
 * @param {Object} backlog - Le backlog √† valider, peut contenir une structure wrapper (success/result)
 * @returns {Object} - R√©sultat de validation {valid: boolean, backlogData?: Object, error?: string}
 */
function validateBacklogResult(backlog) {
  try {
    if (!backlog) {
      return { valid: false, error: 'Backlog invalide ou manquant' };
    }

    let backlogData;

    if (backlog.success && backlog.result) {
      console.log(chalk.blue('üìã Extraction des donn√©es depuis un wrapper MCP'));
      backlogData = backlog.result;
    } else {
      backlogData = backlog;
    }

    if (!backlogData.projectName) {
      return { valid: false, error: 'Le projectName est requis dans le backlog' };
    }

    if (!backlogData.epics || !Array.isArray(backlogData.epics)) {
      return { valid: false, error: 'Epics array is required in the backlog' };
    }

    return { valid: true, backlogData };
  } catch (error) {
    console.error(chalk.red(`‚ùå Erreur lors de la validation du backlog: ${error.message}`));
    console.error(chalk.red(error.stack));
    return { valid: false, error: `Erreur lors de la validation: ${error.message}` };
  }
}

// R√©exporter les fonctions et constantes pour maintenir la compatibilit√© API
module.exports = {
  // generateMarkdownFilesFromResult, // N'est plus import√© directement
  // formatUserStory, // N'est plus import√© directement
  createMarkdownGenerator, // Toujours export√© pour ceux qui voudraient l'utiliser directement
  generateFeatureMarkdown,
  generateMarkdownFiles,
  epicFileInstructions,
  featureFileInstructions,
  userStoryFileInstructions,
  iterationFileInstructions,
  mvpFileInstructions,
  validateBacklogResult,
  createSlug: require('./markdown/utils').createSlug
};

console.log(chalk.green('‚úÖ Module markdown-generator.js de compatibilit√© (corrig√©) export√© avec succ√®s'));
